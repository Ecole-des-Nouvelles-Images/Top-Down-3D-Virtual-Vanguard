//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Resources/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Scripts.Player
{
    public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Convoy"",
            ""id"": ""3ec13e20-b5b1-4e1d-8a93-7197230d8139"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""63a4f1af-7baf-4d00-bccc-2acba8e549a7"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""EnterModule"",
                    ""type"": ""Button"",
                    ""id"": ""de6ddb28-e062-423c-8fe2-75fcf345239d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Composite Left/Right [Keyboard]"",
                    ""id"": ""72f5c472-25eb-4dab-8a6b-d02ffcfe419c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3dec87f4-bc86-44f9-a733-1ee76b4ef231"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8410f2b4-6fde-4ac0-bd07-41c13f31bc0d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Composite Up/Down [Keyboard]"",
                    ""id"": ""0db0d85c-16b3-4046-ae89-6bfdcbe852bc"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0f512f97-edf7-497f-916f-5719d6ecdeac"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5aeeed0f-f26c-4990-80fd-63eeded4ed97"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Axis Horizontal [Gamepad]"",
                    ""id"": ""d29fbc6c-a88f-4f09-8cb6-613dd5218b9b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""585b7b2b-2a48-4c8d-b75c-b368787bea84"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e5f297e4-8937-4bab-8d4c-83bbc0e49826"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Axis Vertical [Gamepad]"",
                    ""id"": ""4a7f10be-1edd-4103-ae66-606ecee8116a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ebd92fc8-70e9-41b5-a6d6-0ac1d44c85c7"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""433abb13-1940-458e-924e-c271c6316f77"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cca2b457-3b1f-4255-8208-2bc950afe7a2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""EnterModule"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a45ac3b-ab03-411f-a5c2-8fd673eba085"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""EnterModule"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Laser"",
            ""id"": ""68d1e2b6-9dce-47a1-aa3b-f2e74bb1d4b0"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""14f3ca44-0bdf-416e-9d37-2ccc09ba2153"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""2a2b51dd-f7d1-4844-956c-f50902eb6dde"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExitModule"",
                    ""type"": ""Button"",
                    ""id"": ""6b508975-72e8-409a-b8ee-a769b73ca886"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Axis [Gamepad]"",
                    ""id"": ""a9cac412-fb87-42a1-9e51-a0cd7205b171"",
                    ""path"": ""1DAxis(whichSideWins=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b5a7a7ef-f946-4dcf-92e4-84b948b6f018"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6452b26b-cb92-4730-9716-715590812f2b"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Axis [Keyboard]"",
                    ""id"": ""84463780-55c7-49a3-9132-cd4ea7cd7186"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""91bd5b18-07a4-491d-b423-d4ad553db05e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7b879312-27f4-4b78-8619-0e13e7ba906a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b2f90ada-0039-493c-9ec5-4164cde70af3"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03dfc285-77b0-4216-95de-d4ccef5ccebb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc2e9186-90bc-4d6b-b107-9bc748b5a50f"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ExitModule"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""955deae7-cc27-46ff-99e5-be86cec38441"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""ExitModule"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Shield"",
            ""id"": ""f5d6d191-845a-4f60-afd9-b57dcae22103"",
            ""actions"": [
                {
                    ""name"": ""SwitchPower"",
                    ""type"": ""Button"",
                    ""id"": ""d221b4cc-1282-41ba-b885-cdbc70db5323"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchPolarity"",
                    ""type"": ""Button"",
                    ""id"": ""d22c5f95-22d2-4963-9d51-ce330e3eb897"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExitModule"",
                    ""type"": ""Button"",
                    ""id"": ""3efaa991-3dc3-41ef-8533-e5a943aeb2b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c97f0d0a-ed17-406b-9524-248ff3dcaf8c"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SwitchPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b7c3144-0a07-4db9-8ad5-9fb8f5de3fe3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""SwitchPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74d11e73-93f3-46c8-b155-7fa14ae112bc"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SwitchPolarity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72cf5f4d-d2d0-4e42-8b66-175337462f71"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""SwitchPolarity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""566019e1-4916-4236-be1d-23ee3d9a6c11"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ExitModule"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c77bdaa-a82f-41aa-a54f-f793cf3b5933"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""ExitModule"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Generator"",
            ""id"": ""ccbaa5c7-739d-4136-8c40-84c075ae711b"",
            ""actions"": [
                {
                    ""name"": ""RedirectEnergy"",
                    ""type"": ""Value"",
                    ""id"": ""8e137261-7b4e-4562-ac3b-6c090874e4fd"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ExitModule"",
                    ""type"": ""Button"",
                    ""id"": ""07da7213-cf88-4279-b601-acfddf5e0d55"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""19b99a26-0c75-4407-8ff5-10983bbf27e2"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ExitModule"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19555639-742f-44e6-ba82-f391d82f2388"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""ExitModule"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Composite Left/Right [Keyboard]"",
                    ""id"": ""b316a604-b0ac-4ef5-804c-8dcaed71cc73"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RedirectEnergy"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2f8164d9-c2a9-413b-8c4d-e37ae590b734"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""RedirectEnergy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6277e4e7-1c5d-488e-b9af-d007713cf086"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""RedirectEnergy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Composite Up/Down [Keyboard]"",
                    ""id"": ""ffb8deaa-c199-4437-b260-87a5e6f5538b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RedirectEnergy"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""cf7ea1e9-5d30-452b-9ce4-165a632bdf47"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""RedirectEnergy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6bc2ed24-31c8-44cd-b9bd-66b80556faab"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""RedirectEnergy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Axis Horizontal [Gamepad]"",
                    ""id"": ""43501189-0411-4ca6-ae17-afb5e55a672b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RedirectEnergy"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6ebcdfe1-20bd-4e69-9fde-1be5218aa7fe"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RedirectEnergy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""fa193de5-f08c-46f8-8411-9e005425eda7"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RedirectEnergy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Axis Vertical [Gamepad]"",
                    ""id"": ""07c41d0f-7a1c-425c-85f4-22dd6d86b042"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RedirectEnergy"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6607b3cb-c26e-49aa-ba3c-b3b947d75726"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RedirectEnergy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""90171cf3-f661-47b7-a27d-aef82f3dc9e0"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RedirectEnergy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Drones"",
            ""id"": ""5241d8a6-c411-42aa-90ca-ce609108b45b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e50e7cac-b6b3-47c9-8c1a-acc295cff35a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ExitModule"",
                    ""type"": ""Button"",
                    ""id"": ""5454ca04-aee3-4fe2-8638-6c67a5a35c0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Composite [Keyboard]"",
                    ""id"": ""f9cf1909-8e2b-4dbc-a8c0-13cc9e1c7294"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0b702b7b-3b6d-481d-96c8-f8212dffd7d9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ed6c4fe6-4bdf-40e6-8e2e-3d0cfa96f6a6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f8ad6230-e08e-4bd8-a0ad-a5fb36a45dd9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""efb166bd-3816-4bf4-85e7-640f52cbdbf1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""be7cdf87-781f-4519-a768-131aac891f50"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ecf4eb40-530a-4641-a8bc-4836b42910f6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard (Test)"",
                    ""action"": ""ExitModule"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f049f838-ac5b-48c1-929c-7468bd906179"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ExitModule"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard (Test)"",
            ""bindingGroup"": ""Keyboard (Test)"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Convoy
            m_Convoy = asset.FindActionMap("Convoy", throwIfNotFound: true);
            m_Convoy_Move = m_Convoy.FindAction("Move", throwIfNotFound: true);
            m_Convoy_EnterModule = m_Convoy.FindAction("EnterModule", throwIfNotFound: true);
            // Laser
            m_Laser = asset.FindActionMap("Laser", throwIfNotFound: true);
            m_Laser_Rotate = m_Laser.FindAction("Rotate", throwIfNotFound: true);
            m_Laser_Fire = m_Laser.FindAction("Fire", throwIfNotFound: true);
            m_Laser_ExitModule = m_Laser.FindAction("ExitModule", throwIfNotFound: true);
            // Shield
            m_Shield = asset.FindActionMap("Shield", throwIfNotFound: true);
            m_Shield_SwitchPower = m_Shield.FindAction("SwitchPower", throwIfNotFound: true);
            m_Shield_SwitchPolarity = m_Shield.FindAction("SwitchPolarity", throwIfNotFound: true);
            m_Shield_ExitModule = m_Shield.FindAction("ExitModule", throwIfNotFound: true);
            // Generator
            m_Generator = asset.FindActionMap("Generator", throwIfNotFound: true);
            m_Generator_RedirectEnergy = m_Generator.FindAction("RedirectEnergy", throwIfNotFound: true);
            m_Generator_ExitModule = m_Generator.FindAction("ExitModule", throwIfNotFound: true);
            // Drones
            m_Drones = asset.FindActionMap("Drones", throwIfNotFound: true);
            m_Drones_Move = m_Drones.FindAction("Move", throwIfNotFound: true);
            m_Drones_ExitModule = m_Drones.FindAction("ExitModule", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Convoy
        private readonly InputActionMap m_Convoy;
        private List<IConvoyActions> m_ConvoyActionsCallbackInterfaces = new List<IConvoyActions>();
        private readonly InputAction m_Convoy_Move;
        private readonly InputAction m_Convoy_EnterModule;
        public struct ConvoyActions
        {
            private @PlayerInputActions m_Wrapper;
            public ConvoyActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Convoy_Move;
            public InputAction @EnterModule => m_Wrapper.m_Convoy_EnterModule;
            public InputActionMap Get() { return m_Wrapper.m_Convoy; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ConvoyActions set) { return set.Get(); }
            public void AddCallbacks(IConvoyActions instance)
            {
                if (instance == null || m_Wrapper.m_ConvoyActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ConvoyActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @EnterModule.started += instance.OnEnterModule;
                @EnterModule.performed += instance.OnEnterModule;
                @EnterModule.canceled += instance.OnEnterModule;
            }

            private void UnregisterCallbacks(IConvoyActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @EnterModule.started -= instance.OnEnterModule;
                @EnterModule.performed -= instance.OnEnterModule;
                @EnterModule.canceled -= instance.OnEnterModule;
            }

            public void RemoveCallbacks(IConvoyActions instance)
            {
                if (m_Wrapper.m_ConvoyActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IConvoyActions instance)
            {
                foreach (var item in m_Wrapper.m_ConvoyActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ConvoyActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ConvoyActions @Convoy => new ConvoyActions(this);

        // Laser
        private readonly InputActionMap m_Laser;
        private List<ILaserActions> m_LaserActionsCallbackInterfaces = new List<ILaserActions>();
        private readonly InputAction m_Laser_Rotate;
        private readonly InputAction m_Laser_Fire;
        private readonly InputAction m_Laser_ExitModule;
        public struct LaserActions
        {
            private @PlayerInputActions m_Wrapper;
            public LaserActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Rotate => m_Wrapper.m_Laser_Rotate;
            public InputAction @Fire => m_Wrapper.m_Laser_Fire;
            public InputAction @ExitModule => m_Wrapper.m_Laser_ExitModule;
            public InputActionMap Get() { return m_Wrapper.m_Laser; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(LaserActions set) { return set.Get(); }
            public void AddCallbacks(ILaserActions instance)
            {
                if (instance == null || m_Wrapper.m_LaserActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_LaserActionsCallbackInterfaces.Add(instance);
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @ExitModule.started += instance.OnExitModule;
                @ExitModule.performed += instance.OnExitModule;
                @ExitModule.canceled += instance.OnExitModule;
            }

            private void UnregisterCallbacks(ILaserActions instance)
            {
                @Rotate.started -= instance.OnRotate;
                @Rotate.performed -= instance.OnRotate;
                @Rotate.canceled -= instance.OnRotate;
                @Fire.started -= instance.OnFire;
                @Fire.performed -= instance.OnFire;
                @Fire.canceled -= instance.OnFire;
                @ExitModule.started -= instance.OnExitModule;
                @ExitModule.performed -= instance.OnExitModule;
                @ExitModule.canceled -= instance.OnExitModule;
            }

            public void RemoveCallbacks(ILaserActions instance)
            {
                if (m_Wrapper.m_LaserActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ILaserActions instance)
            {
                foreach (var item in m_Wrapper.m_LaserActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_LaserActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public LaserActions @Laser => new LaserActions(this);

        // Shield
        private readonly InputActionMap m_Shield;
        private List<IShieldActions> m_ShieldActionsCallbackInterfaces = new List<IShieldActions>();
        private readonly InputAction m_Shield_SwitchPower;
        private readonly InputAction m_Shield_SwitchPolarity;
        private readonly InputAction m_Shield_ExitModule;
        public struct ShieldActions
        {
            private @PlayerInputActions m_Wrapper;
            public ShieldActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @SwitchPower => m_Wrapper.m_Shield_SwitchPower;
            public InputAction @SwitchPolarity => m_Wrapper.m_Shield_SwitchPolarity;
            public InputAction @ExitModule => m_Wrapper.m_Shield_ExitModule;
            public InputActionMap Get() { return m_Wrapper.m_Shield; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ShieldActions set) { return set.Get(); }
            public void AddCallbacks(IShieldActions instance)
            {
                if (instance == null || m_Wrapper.m_ShieldActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ShieldActionsCallbackInterfaces.Add(instance);
                @SwitchPower.started += instance.OnSwitchPower;
                @SwitchPower.performed += instance.OnSwitchPower;
                @SwitchPower.canceled += instance.OnSwitchPower;
                @SwitchPolarity.started += instance.OnSwitchPolarity;
                @SwitchPolarity.performed += instance.OnSwitchPolarity;
                @SwitchPolarity.canceled += instance.OnSwitchPolarity;
                @ExitModule.started += instance.OnExitModule;
                @ExitModule.performed += instance.OnExitModule;
                @ExitModule.canceled += instance.OnExitModule;
            }

            private void UnregisterCallbacks(IShieldActions instance)
            {
                @SwitchPower.started -= instance.OnSwitchPower;
                @SwitchPower.performed -= instance.OnSwitchPower;
                @SwitchPower.canceled -= instance.OnSwitchPower;
                @SwitchPolarity.started -= instance.OnSwitchPolarity;
                @SwitchPolarity.performed -= instance.OnSwitchPolarity;
                @SwitchPolarity.canceled -= instance.OnSwitchPolarity;
                @ExitModule.started -= instance.OnExitModule;
                @ExitModule.performed -= instance.OnExitModule;
                @ExitModule.canceled -= instance.OnExitModule;
            }

            public void RemoveCallbacks(IShieldActions instance)
            {
                if (m_Wrapper.m_ShieldActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IShieldActions instance)
            {
                foreach (var item in m_Wrapper.m_ShieldActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ShieldActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ShieldActions @Shield => new ShieldActions(this);

        // Generator
        private readonly InputActionMap m_Generator;
        private List<IGeneratorActions> m_GeneratorActionsCallbackInterfaces = new List<IGeneratorActions>();
        private readonly InputAction m_Generator_RedirectEnergy;
        private readonly InputAction m_Generator_ExitModule;
        public struct GeneratorActions
        {
            private @PlayerInputActions m_Wrapper;
            public GeneratorActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @RedirectEnergy => m_Wrapper.m_Generator_RedirectEnergy;
            public InputAction @ExitModule => m_Wrapper.m_Generator_ExitModule;
            public InputActionMap Get() { return m_Wrapper.m_Generator; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GeneratorActions set) { return set.Get(); }
            public void AddCallbacks(IGeneratorActions instance)
            {
                if (instance == null || m_Wrapper.m_GeneratorActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GeneratorActionsCallbackInterfaces.Add(instance);
                @RedirectEnergy.started += instance.OnRedirectEnergy;
                @RedirectEnergy.performed += instance.OnRedirectEnergy;
                @RedirectEnergy.canceled += instance.OnRedirectEnergy;
                @ExitModule.started += instance.OnExitModule;
                @ExitModule.performed += instance.OnExitModule;
                @ExitModule.canceled += instance.OnExitModule;
            }

            private void UnregisterCallbacks(IGeneratorActions instance)
            {
                @RedirectEnergy.started -= instance.OnRedirectEnergy;
                @RedirectEnergy.performed -= instance.OnRedirectEnergy;
                @RedirectEnergy.canceled -= instance.OnRedirectEnergy;
                @ExitModule.started -= instance.OnExitModule;
                @ExitModule.performed -= instance.OnExitModule;
                @ExitModule.canceled -= instance.OnExitModule;
            }

            public void RemoveCallbacks(IGeneratorActions instance)
            {
                if (m_Wrapper.m_GeneratorActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGeneratorActions instance)
            {
                foreach (var item in m_Wrapper.m_GeneratorActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GeneratorActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GeneratorActions @Generator => new GeneratorActions(this);

        // Drones
        private readonly InputActionMap m_Drones;
        private List<IDronesActions> m_DronesActionsCallbackInterfaces = new List<IDronesActions>();
        private readonly InputAction m_Drones_Move;
        private readonly InputAction m_Drones_ExitModule;
        public struct DronesActions
        {
            private @PlayerInputActions m_Wrapper;
            public DronesActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Drones_Move;
            public InputAction @ExitModule => m_Wrapper.m_Drones_ExitModule;
            public InputActionMap Get() { return m_Wrapper.m_Drones; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DronesActions set) { return set.Get(); }
            public void AddCallbacks(IDronesActions instance)
            {
                if (instance == null || m_Wrapper.m_DronesActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_DronesActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @ExitModule.started += instance.OnExitModule;
                @ExitModule.performed += instance.OnExitModule;
                @ExitModule.canceled += instance.OnExitModule;
            }

            private void UnregisterCallbacks(IDronesActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @ExitModule.started -= instance.OnExitModule;
                @ExitModule.performed -= instance.OnExitModule;
                @ExitModule.canceled -= instance.OnExitModule;
            }

            public void RemoveCallbacks(IDronesActions instance)
            {
                if (m_Wrapper.m_DronesActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IDronesActions instance)
            {
                foreach (var item in m_Wrapper.m_DronesActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_DronesActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public DronesActions @Drones => new DronesActions(this);
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        private int m_KeyboardTestSchemeIndex = -1;
        public InputControlScheme KeyboardTestScheme
        {
            get
            {
                if (m_KeyboardTestSchemeIndex == -1) m_KeyboardTestSchemeIndex = asset.FindControlSchemeIndex("Keyboard (Test)");
                return asset.controlSchemes[m_KeyboardTestSchemeIndex];
            }
        }
        public interface IConvoyActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnEnterModule(InputAction.CallbackContext context);
        }
        public interface ILaserActions
        {
            void OnRotate(InputAction.CallbackContext context);
            void OnFire(InputAction.CallbackContext context);
            void OnExitModule(InputAction.CallbackContext context);
        }
        public interface IShieldActions
        {
            void OnSwitchPower(InputAction.CallbackContext context);
            void OnSwitchPolarity(InputAction.CallbackContext context);
            void OnExitModule(InputAction.CallbackContext context);
        }
        public interface IGeneratorActions
        {
            void OnRedirectEnergy(InputAction.CallbackContext context);
            void OnExitModule(InputAction.CallbackContext context);
        }
        public interface IDronesActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnExitModule(InputAction.CallbackContext context);
        }
    }
}
