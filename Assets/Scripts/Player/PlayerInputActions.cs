//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Resources/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Script.Player
{
    public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Convoy"",
            ""id"": ""a30bc7e7-431f-45eb-b685-477c3de81ea7"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ab7d6853-9365-4512-a836-1be24cbee988"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""EnterModule"",
                    ""type"": ""Button"",
                    ""id"": ""9014fb0a-238b-4f05-8af5-5fe9facea511"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""978bfe49-cc26-4a3d-ab7b-7d7a29327403"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39100aa8-3869-4678-ac61-21d93e4bb6c2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""EnterModule"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Laser"",
            ""id"": ""0ad13577-6d22-42b7-8034-a82a1bfeeaf6"",
            ""actions"": [
                {
                    ""name"": ""ModuleExit"",
                    ""type"": ""Button"",
                    ""id"": ""fc70400b-65d6-418b-955c-b9f2eaf0ddee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""db9a1ee6-d558-4dd2-b334-a4c2c0e68f37"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""ba32371e-1813-40b9-9aac-82c8467597d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b9d58b09-8b0a-4f71-95ed-81d5455666a1"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ModuleExit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""613cd96e-be42-41a8-af61-2cdceb02bc77"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e12ee654-4436-47f6-9041-df660634a8a5"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Shield"",
            ""id"": ""478b2547-92db-43f4-8f82-1e2ac4fe97c0"",
            ""actions"": [
                {
                    ""name"": ""ModuleExit"",
                    ""type"": ""Button"",
                    ""id"": ""f1328d82-57be-4d75-a2af-b992cd283e09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TogglePower"",
                    ""type"": ""Button"",
                    ""id"": ""c874a0b9-2aff-447b-b22e-b89cf86815c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TogglePolarity"",
                    ""type"": ""Button"",
                    ""id"": ""cde59b40-ab81-46ca-a154-f9d55897e54d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5e057562-e4a0-42cd-b9cd-f9725dcc9e49"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ModuleExit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""178270c3-b53c-437b-b383-9659bc4bd174"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""TogglePower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c78e7bd-0147-4b81-b06b-e728db20d00b"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TogglePolarity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Generator"",
            ""id"": ""37bfca49-b2d8-4af6-a3fc-159a61b59f92"",
            ""actions"": [
                {
                    ""name"": ""ModuleExit"",
                    ""type"": ""Button"",
                    ""id"": ""56c9fbf2-477a-4033-aad8-4140dfc37223"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RedirectPower"",
                    ""type"": ""Button"",
                    ""id"": ""e5cc4147-168b-4664-92c1-10c1922fb6f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bc457db5-2ee9-4614-b7f2-8bd79f73ceb3"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ModuleExit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Composite [Gamepad]"",
                    ""id"": ""9e945576-28a7-4138-871b-edeadac43146"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RedirectPower"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c56ebd41-5d72-45f3-b9ea-3ad5621d4839"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RedirectPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4d7e99b1-cf58-4439-ac7f-7834e25435e9"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RedirectPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Composite [Gamepad]"",
                    ""id"": ""d4038689-3379-4a42-a9c9-805a4c26b599"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RedirectPower"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b57dad39-40b6-4828-9d4c-39914de4cf29"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RedirectPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""56f99534-c355-486d-999e-8f2ca05c7821"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RedirectPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""DroneController"",
            ""id"": ""d883a131-9e8c-495e-a7ab-1cdc6eecfc01"",
            ""actions"": [
                {
                    ""name"": ""ModuleExit"",
                    ""type"": ""Button"",
                    ""id"": ""36c03e38-610e-4285-b712-7ac677d7bdc2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DroneMove"",
                    ""type"": ""Value"",
                    ""id"": ""d51daed8-e62d-4ec5-a07f-886de1a14013"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DroneInteract"",
                    ""type"": ""Button"",
                    ""id"": ""b45e2b6c-2c1d-4fa5-9057-f4bc08da0ea6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f6ad4f71-eac3-4c20-a2b3-a90ae475e87e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ModuleExit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""021936ea-1011-4a26-897e-a32841f5137d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""DroneMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4f8f2ad-318b-4c21-b8d6-eca5d4def9ef"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""DroneInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""d7875fbe-de4f-4fbd-8a76-aa9ee9b288c2"",
            ""actions"": [
                {
                    ""name"": ""Navigate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""24009191-a0dd-483a-927b-a805fbebb97c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""182b2603-c9ac-4b93-92f9-2158c19097c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""3841510e-c975-4981-8d78-cf482b7a8f95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""809f371f-c5e2-4e7a-83a1-d867598f40dd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""14a5d6e8-4aaf-4119-a9ef-34b8c2c548bf"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9144cbe6-05e1-4687-a6d7-24f99d23dd81"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2db08d65-c5fb-421b-983f-c71163608d67"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""58748904-2ea9-4a80-8579-b500e6a76df8"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8ba04515-75aa-45de-966d-393d9bbd1c14"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""712e721c-bdfb-4b23-a86c-a0d9fcfea921"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fcd248ae-a788-4676-a12e-f4d81205600b"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1f04d9bc-c50b-41a1-bfcc-afb75475ec20"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fb8277d4-c5cd-4663-9dc7-ee3f0b506d90"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""e25d9774-381c-4a61-b47c-7b6b299ad9f9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""ff527021-f211-4c02-933e-5976594c46ed"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e92bb26-7e3b-4ec4-b06b-3c8f8e498ddc"",
                    ""path"": ""*/{Submit}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82627dcc-3b13-4ba9-841d-e4b746d6553e"",
                    ""path"": ""*/{Cancel}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Convoy
            m_Convoy = asset.FindActionMap("Convoy", throwIfNotFound: true);
            m_Convoy_Move = m_Convoy.FindAction("Move", throwIfNotFound: true);
            m_Convoy_EnterModule = m_Convoy.FindAction("EnterModule", throwIfNotFound: true);
            // Laser
            m_Laser = asset.FindActionMap("Laser", throwIfNotFound: true);
            m_Laser_ModuleExit = m_Laser.FindAction("ModuleExit", throwIfNotFound: true);
            m_Laser_Aim = m_Laser.FindAction("Aim", throwIfNotFound: true);
            m_Laser_Fire = m_Laser.FindAction("Fire", throwIfNotFound: true);
            // Shield
            m_Shield = asset.FindActionMap("Shield", throwIfNotFound: true);
            m_Shield_ModuleExit = m_Shield.FindAction("ModuleExit", throwIfNotFound: true);
            m_Shield_TogglePower = m_Shield.FindAction("TogglePower", throwIfNotFound: true);
            m_Shield_TogglePolarity = m_Shield.FindAction("TogglePolarity", throwIfNotFound: true);
            // Generator
            m_Generator = asset.FindActionMap("Generator", throwIfNotFound: true);
            m_Generator_ModuleExit = m_Generator.FindAction("ModuleExit", throwIfNotFound: true);
            m_Generator_RedirectPower = m_Generator.FindAction("RedirectPower", throwIfNotFound: true);
            // DroneController
            m_DroneController = asset.FindActionMap("DroneController", throwIfNotFound: true);
            m_DroneController_ModuleExit = m_DroneController.FindAction("ModuleExit", throwIfNotFound: true);
            m_DroneController_DroneMove = m_DroneController.FindAction("DroneMove", throwIfNotFound: true);
            m_DroneController_DroneInteract = m_DroneController.FindAction("DroneInteract", throwIfNotFound: true);
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_Navigate = m_UI.FindAction("Navigate", throwIfNotFound: true);
            m_UI_Submit = m_UI.FindAction("Submit", throwIfNotFound: true);
            m_UI_Cancel = m_UI.FindAction("Cancel", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Convoy
        private readonly InputActionMap m_Convoy;
        private List<IConvoyActions> m_ConvoyActionsCallbackInterfaces = new List<IConvoyActions>();
        private readonly InputAction m_Convoy_Move;
        private readonly InputAction m_Convoy_EnterModule;
        public struct ConvoyActions
        {
            private @PlayerInputActions m_Wrapper;
            public ConvoyActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Convoy_Move;
            public InputAction @EnterModule => m_Wrapper.m_Convoy_EnterModule;
            public InputActionMap Get() { return m_Wrapper.m_Convoy; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ConvoyActions set) { return set.Get(); }
            public void AddCallbacks(IConvoyActions instance)
            {
                if (instance == null || m_Wrapper.m_ConvoyActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ConvoyActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @EnterModule.started += instance.OnEnterModule;
                @EnterModule.performed += instance.OnEnterModule;
                @EnterModule.canceled += instance.OnEnterModule;
            }

            private void UnregisterCallbacks(IConvoyActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @EnterModule.started -= instance.OnEnterModule;
                @EnterModule.performed -= instance.OnEnterModule;
                @EnterModule.canceled -= instance.OnEnterModule;
            }

            public void RemoveCallbacks(IConvoyActions instance)
            {
                if (m_Wrapper.m_ConvoyActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IConvoyActions instance)
            {
                foreach (var item in m_Wrapper.m_ConvoyActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ConvoyActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ConvoyActions @Convoy => new ConvoyActions(this);

        // Laser
        private readonly InputActionMap m_Laser;
        private List<ILaserActions> m_LaserActionsCallbackInterfaces = new List<ILaserActions>();
        private readonly InputAction m_Laser_ModuleExit;
        private readonly InputAction m_Laser_Aim;
        private readonly InputAction m_Laser_Fire;
        public struct LaserActions
        {
            private @PlayerInputActions m_Wrapper;
            public LaserActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @ModuleExit => m_Wrapper.m_Laser_ModuleExit;
            public InputAction @Aim => m_Wrapper.m_Laser_Aim;
            public InputAction @Fire => m_Wrapper.m_Laser_Fire;
            public InputActionMap Get() { return m_Wrapper.m_Laser; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(LaserActions set) { return set.Get(); }
            public void AddCallbacks(ILaserActions instance)
            {
                if (instance == null || m_Wrapper.m_LaserActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_LaserActionsCallbackInterfaces.Add(instance);
                @ModuleExit.started += instance.OnModuleExit;
                @ModuleExit.performed += instance.OnModuleExit;
                @ModuleExit.canceled += instance.OnModuleExit;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
            }

            private void UnregisterCallbacks(ILaserActions instance)
            {
                @ModuleExit.started -= instance.OnModuleExit;
                @ModuleExit.performed -= instance.OnModuleExit;
                @ModuleExit.canceled -= instance.OnModuleExit;
                @Aim.started -= instance.OnAim;
                @Aim.performed -= instance.OnAim;
                @Aim.canceled -= instance.OnAim;
                @Fire.started -= instance.OnFire;
                @Fire.performed -= instance.OnFire;
                @Fire.canceled -= instance.OnFire;
            }

            public void RemoveCallbacks(ILaserActions instance)
            {
                if (m_Wrapper.m_LaserActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ILaserActions instance)
            {
                foreach (var item in m_Wrapper.m_LaserActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_LaserActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public LaserActions @Laser => new LaserActions(this);

        // Shield
        private readonly InputActionMap m_Shield;
        private List<IShieldActions> m_ShieldActionsCallbackInterfaces = new List<IShieldActions>();
        private readonly InputAction m_Shield_ModuleExit;
        private readonly InputAction m_Shield_TogglePower;
        private readonly InputAction m_Shield_TogglePolarity;
        public struct ShieldActions
        {
            private @PlayerInputActions m_Wrapper;
            public ShieldActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @ModuleExit => m_Wrapper.m_Shield_ModuleExit;
            public InputAction @TogglePower => m_Wrapper.m_Shield_TogglePower;
            public InputAction @TogglePolarity => m_Wrapper.m_Shield_TogglePolarity;
            public InputActionMap Get() { return m_Wrapper.m_Shield; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ShieldActions set) { return set.Get(); }
            public void AddCallbacks(IShieldActions instance)
            {
                if (instance == null || m_Wrapper.m_ShieldActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ShieldActionsCallbackInterfaces.Add(instance);
                @ModuleExit.started += instance.OnModuleExit;
                @ModuleExit.performed += instance.OnModuleExit;
                @ModuleExit.canceled += instance.OnModuleExit;
                @TogglePower.started += instance.OnTogglePower;
                @TogglePower.performed += instance.OnTogglePower;
                @TogglePower.canceled += instance.OnTogglePower;
                @TogglePolarity.started += instance.OnTogglePolarity;
                @TogglePolarity.performed += instance.OnTogglePolarity;
                @TogglePolarity.canceled += instance.OnTogglePolarity;
            }

            private void UnregisterCallbacks(IShieldActions instance)
            {
                @ModuleExit.started -= instance.OnModuleExit;
                @ModuleExit.performed -= instance.OnModuleExit;
                @ModuleExit.canceled -= instance.OnModuleExit;
                @TogglePower.started -= instance.OnTogglePower;
                @TogglePower.performed -= instance.OnTogglePower;
                @TogglePower.canceled -= instance.OnTogglePower;
                @TogglePolarity.started -= instance.OnTogglePolarity;
                @TogglePolarity.performed -= instance.OnTogglePolarity;
                @TogglePolarity.canceled -= instance.OnTogglePolarity;
            }

            public void RemoveCallbacks(IShieldActions instance)
            {
                if (m_Wrapper.m_ShieldActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IShieldActions instance)
            {
                foreach (var item in m_Wrapper.m_ShieldActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ShieldActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ShieldActions @Shield => new ShieldActions(this);

        // Generator
        private readonly InputActionMap m_Generator;
        private List<IGeneratorActions> m_GeneratorActionsCallbackInterfaces = new List<IGeneratorActions>();
        private readonly InputAction m_Generator_ModuleExit;
        private readonly InputAction m_Generator_RedirectPower;
        public struct GeneratorActions
        {
            private @PlayerInputActions m_Wrapper;
            public GeneratorActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @ModuleExit => m_Wrapper.m_Generator_ModuleExit;
            public InputAction @RedirectPower => m_Wrapper.m_Generator_RedirectPower;
            public InputActionMap Get() { return m_Wrapper.m_Generator; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GeneratorActions set) { return set.Get(); }
            public void AddCallbacks(IGeneratorActions instance)
            {
                if (instance == null || m_Wrapper.m_GeneratorActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GeneratorActionsCallbackInterfaces.Add(instance);
                @ModuleExit.started += instance.OnModuleExit;
                @ModuleExit.performed += instance.OnModuleExit;
                @ModuleExit.canceled += instance.OnModuleExit;
                @RedirectPower.started += instance.OnRedirectPower;
                @RedirectPower.performed += instance.OnRedirectPower;
                @RedirectPower.canceled += instance.OnRedirectPower;
            }

            private void UnregisterCallbacks(IGeneratorActions instance)
            {
                @ModuleExit.started -= instance.OnModuleExit;
                @ModuleExit.performed -= instance.OnModuleExit;
                @ModuleExit.canceled -= instance.OnModuleExit;
                @RedirectPower.started -= instance.OnRedirectPower;
                @RedirectPower.performed -= instance.OnRedirectPower;
                @RedirectPower.canceled -= instance.OnRedirectPower;
            }

            public void RemoveCallbacks(IGeneratorActions instance)
            {
                if (m_Wrapper.m_GeneratorActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGeneratorActions instance)
            {
                foreach (var item in m_Wrapper.m_GeneratorActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GeneratorActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GeneratorActions @Generator => new GeneratorActions(this);

        // DroneController
        private readonly InputActionMap m_DroneController;
        private List<IDroneControllerActions> m_DroneControllerActionsCallbackInterfaces = new List<IDroneControllerActions>();
        private readonly InputAction m_DroneController_ModuleExit;
        private readonly InputAction m_DroneController_DroneMove;
        private readonly InputAction m_DroneController_DroneInteract;
        public struct DroneControllerActions
        {
            private @PlayerInputActions m_Wrapper;
            public DroneControllerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @ModuleExit => m_Wrapper.m_DroneController_ModuleExit;
            public InputAction @DroneMove => m_Wrapper.m_DroneController_DroneMove;
            public InputAction @DroneInteract => m_Wrapper.m_DroneController_DroneInteract;
            public InputActionMap Get() { return m_Wrapper.m_DroneController; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DroneControllerActions set) { return set.Get(); }
            public void AddCallbacks(IDroneControllerActions instance)
            {
                if (instance == null || m_Wrapper.m_DroneControllerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_DroneControllerActionsCallbackInterfaces.Add(instance);
                @ModuleExit.started += instance.OnModuleExit;
                @ModuleExit.performed += instance.OnModuleExit;
                @ModuleExit.canceled += instance.OnModuleExit;
                @DroneMove.started += instance.OnDroneMove;
                @DroneMove.performed += instance.OnDroneMove;
                @DroneMove.canceled += instance.OnDroneMove;
                @DroneInteract.started += instance.OnDroneInteract;
                @DroneInteract.performed += instance.OnDroneInteract;
                @DroneInteract.canceled += instance.OnDroneInteract;
            }

            private void UnregisterCallbacks(IDroneControllerActions instance)
            {
                @ModuleExit.started -= instance.OnModuleExit;
                @ModuleExit.performed -= instance.OnModuleExit;
                @ModuleExit.canceled -= instance.OnModuleExit;
                @DroneMove.started -= instance.OnDroneMove;
                @DroneMove.performed -= instance.OnDroneMove;
                @DroneMove.canceled -= instance.OnDroneMove;
                @DroneInteract.started -= instance.OnDroneInteract;
                @DroneInteract.performed -= instance.OnDroneInteract;
                @DroneInteract.canceled -= instance.OnDroneInteract;
            }

            public void RemoveCallbacks(IDroneControllerActions instance)
            {
                if (m_Wrapper.m_DroneControllerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IDroneControllerActions instance)
            {
                foreach (var item in m_Wrapper.m_DroneControllerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_DroneControllerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public DroneControllerActions @DroneController => new DroneControllerActions(this);

        // UI
        private readonly InputActionMap m_UI;
        private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
        private readonly InputAction m_UI_Navigate;
        private readonly InputAction m_UI_Submit;
        private readonly InputAction m_UI_Cancel;
        public struct UIActions
        {
            private @PlayerInputActions m_Wrapper;
            public UIActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Navigate => m_Wrapper.m_UI_Navigate;
            public InputAction @Submit => m_Wrapper.m_UI_Submit;
            public InputAction @Cancel => m_Wrapper.m_UI_Cancel;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void AddCallbacks(IUIActions instance)
            {
                if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
                @Navigate.started += instance.OnNavigate;
                @Navigate.performed += instance.OnNavigate;
                @Navigate.canceled += instance.OnNavigate;
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
            }

            private void UnregisterCallbacks(IUIActions instance)
            {
                @Navigate.started -= instance.OnNavigate;
                @Navigate.performed -= instance.OnNavigate;
                @Navigate.canceled -= instance.OnNavigate;
                @Submit.started -= instance.OnSubmit;
                @Submit.performed -= instance.OnSubmit;
                @Submit.canceled -= instance.OnSubmit;
                @Cancel.started -= instance.OnCancel;
                @Cancel.performed -= instance.OnCancel;
                @Cancel.canceled -= instance.OnCancel;
            }

            public void RemoveCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUIActions instance)
            {
                foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UIActions @UI => new UIActions(this);
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        public interface IConvoyActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnEnterModule(InputAction.CallbackContext context);
        }
        public interface ILaserActions
        {
            void OnModuleExit(InputAction.CallbackContext context);
            void OnAim(InputAction.CallbackContext context);
            void OnFire(InputAction.CallbackContext context);
        }
        public interface IShieldActions
        {
            void OnModuleExit(InputAction.CallbackContext context);
            void OnTogglePower(InputAction.CallbackContext context);
            void OnTogglePolarity(InputAction.CallbackContext context);
        }
        public interface IGeneratorActions
        {
            void OnModuleExit(InputAction.CallbackContext context);
            void OnRedirectPower(InputAction.CallbackContext context);
        }
        public interface IDroneControllerActions
        {
            void OnModuleExit(InputAction.CallbackContext context);
            void OnDroneMove(InputAction.CallbackContext context);
            void OnDroneInteract(InputAction.CallbackContext context);
        }
        public interface IUIActions
        {
            void OnNavigate(InputAction.CallbackContext context);
            void OnSubmit(InputAction.CallbackContext context);
            void OnCancel(InputAction.CallbackContext context);
        }
    }
}
